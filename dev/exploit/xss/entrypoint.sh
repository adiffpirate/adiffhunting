#!/bin/bash

nuclei_scan(){
	nuclei_target=$1
	nuclei_output=$2
	nuclei_args=$3

	# Get updated list of resolvers once a day
	resolvers=/tmp/adh-resolvers.txt
	if [ $(($(date +%s)-$(date +%s -r $resolvers || echo 86401))) -gt 86400 ]; then
		>&2 echo "Downloading resolvers file"
		curl --silent https://raw.githubusercontent.com/trickest/resolvers/main/resolvers.txt > $resolvers
	fi
	# Abort if resolvers file is empty (probably the download didn't succeed for some reason)
	if [ ! -s $resolvers ]; then
		>&2 echo "Resolvers file is empty. Aborting"
		rm -f $resolvers
		exit 1
	fi

	nuclei \
		-target $nuclei_target -output $nuclei_output -jsonl \
		-silent -no-stdin -resolvers $resolvers \
		-concurrency 1 -rate-limit 10 \
		$nuclei_args

	if [ ! -s $nuclei_output ]; then
		echo "[$nuclei_target] Nothing was found"
	fi
}

scan_and_save(){
	scan=$1
	input=$2
	args=$3

	# Scan
	output=/tmp/adh-output
	$scan "$input" "$output" "$args"

	# Save vulns on database
	if [ -s $output ]; then
		$UTILS/query_dgraph.sh -q "
			mutation {
				addVuln(input: $(cat $output | parse_output | jq -s), upsert: true){
					vuln { name }
				}
			}
		" | jq -c .
	fi
}

# Print output in JSON Lines format
parse_output(){
	while read line; do
		echo $line | jq -c '{
			name: ( .info.name + ": " + ."matched-at" ),
			domain: { name: ."matched-at" },
			title: .info.name,
			class: { name: "xss" },
			description: .info.description,
			severity: .info.severity,
			references: .info.reference,
			evidence: { target: ."extracted-results"[0], request: .request, response: .response },
			foundBy: [ { name: "nuclei", type: "exploit" } ],
			updatedAt: .timestamp
		}' || >&2 echo "Error while processing: $line"
	done
}

get_domain(){
	# Get a domain with A/AAAA/CNAME record and without the "lastExploit" field
	# reverse ordered by level so that lower level domains are scanned first
	domain_with_record=$(
		$UTILS/get_dnsrecords.sh \
			-t 'A AAAA CNAME' \
			-f "not has(Domain.lastExploit)" \
			-a 'orderdesc: Domain.level, first: 1' \
		| awk '{print $1}' | sort -u
	)
	# If all domains have "lastExploit", get the oldest with A/AAAA/CNAME record
	# that is at least older than $DOMAIN_SCAN_COOLDOWN
	if [ -z $domain_with_record ]; then
		domain_with_record=$(
			$UTILS/get_dnsrecords.sh \
				-t 'A AAAA CNAME' \
				-f "lt(Domain.lastExploit, \"$(date -Iseconds -d "-$DOMAIN_SCAN_COOLDOWN")\")" \
				-a 'orderasc: Domain.lastExploit, first: 1' \
			| awk '{print $1}' | sort -u
		)
	fi

	if [ -z $domain ]; then # Return if unable to get a domain
		return
	fi

	>&2 echo "[$domain] Updating lastExploit field"
	>&2 $UTILS/query_dgraph.sh -q "
		mutation {
			updateDomain(input: {
				filter: { name: { eq: \"$domain\" } },
				set: { lastExploit: \"$(date -Iseconds)\"} }
			){
				domain { name }
			}
		}
	"

	# Print domain
	echo $domain_with_record
}

while true; do

	$UTILS/wait_for_db.sh

	domain=$(get_domain)

	if [ -z $domain ]; then
		echo "No domain to scan. Trying again in 10 seconds"
		sleep 10
		continue
	fi

	echo "[$domain] Running: Nuclei"
	scan_and_save 'nuclei_scan' "$domain" '-tags xss'

done
