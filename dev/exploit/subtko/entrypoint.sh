#!/bin/bash
set -eEo pipefail
trap '$UTILS/_stacktrace.sh "$?" "$BASH_SOURCE" "$BASH_COMMAND" "$LINENO"' ERR

dangling_cname_scan(){
	input=$1

	initial_output=/tmp/adh-subtko-dangling-cname-scan-exploit-initial-output.txt
	$UTILS/exploit.sh 'nuclei' $input '-t dns/detect-dangling-cname.yaml' > $initial_output

	# Get unique list of domains from dangling cnames findings
	rootdomains=/tmp/adh-dangling-cname-scan-domains.txt
	cat $initial_output | while read line; do
		$UTILS/_log.sh 'debug' 'Extracting CNAME from initial output' "jsonline=$line"
		cname=$(echo $line | jq -r '.evidence.target' | sed 's/\.$//')
		$UTILS/_log.sh 'info' 'Found CNAME with status NXDOMAIN' "cname=$cname"
		# Return rootdomain by leveraging the tld list file
		echo $cname | egrep -o "[^.]+\.($(xargs -a $UTILS/tld-list.txt | sed 's/ /|/g'))(\.[^.]+)?$"
	done > $rootdomains
	sort -u $rootdomains -o $rootdomains

	# For each rootdomain
	output=/tmp/adh-subtko-dangling-cname-scan-exploit-output.txt
	cat $rootdomains | while read rootdomain; do
		# Check if is available to claim
		$UTILS/_log.sh 'info' 'Checking if rootdomain is available' "rootdomain=$rootdomain"
		if whois $rootdomain 2>/dev/null | grep -i 'no match\|not found' > /dev/null; then
			$UTILS/_log.sh 'info' 'Rootdomain is available' "rootdomain=$rootdomain"
			# Return all dangling cname findings from initial output that ends with this rootdomain
			jq -c "select(.evidence.target | test(\"$rootdomain(.)?$\"))" $initial_output
		else
			$UTILS/_log.sh 'info' 'Rootdomain is not available' "rootdomain=$rootdomain"
		fi
	done > $output

	# Save vulns on database if output is not empty
	if [ -s "$output" ]; then
		$UTILS/query_dgraph.sh -q "
			mutation {
				addVuln(input: $(jq -c -s $output), upsert: true){
					vuln { name }
				}
			}
		" | jq -c .
	fi
}

get_domains(){
	filter='not eq(Domain.skipScans, true)'
	extra_filter=$1
	if [ -n "$extra_filter" ]; then
		filter="$filter and $extra_filter"
	fi

	records=/tmp/adh-get_domains-records.txt
	# Get CNAME values from 100 domains without the "lastExploit" field
	$UTILS/get_dnsrecords.sh -t CNAME -f "$filter and not has(Domain.lastExploit)" -a 'first: 100' > $records
	# If all domains have "lastExploit", get 100 oldests that are at least older than $DOMAIN_SCAN_COOLDOWN
	if [ ! -s "$records" ]; then
		$UTILS/get_dnsrecords.sh -t CNAME \
			-f "$filter and lt(Domain.lastExploit, \"$(date -Iseconds -d "-$DOMAIN_SCAN_COOLDOWN")\")" \
			-a 'first: 100, orderasc: Domain.lastExploit' \
		> $records
	fi

	if [ ! -s "$records" ]; then # Return if unable to get records
		return
	fi

	# Get domains from cname records
	$UTILS/_log.sh 'debug' 'Parsing records' "records=$(cat $records)"
	domains=/tmp/adh-get_domains-domains
	awk '{print $1}' $records | sort -u > $domains

	$UTILS/_log.sh 'info' 'Updating lastExploit field' "domains=$(cat $domains)"
	$UTILS/save_domains.sh -f <(cat $domains | sed '1i name,lastExploit' | sed "s/$/,$(date -Iseconds)/") > /dev/null

	# Print domains
	cat $domains
}

while true; do

	export OP_ID=$(uuidgen -r)
	$UTILS/wait_for_db.sh

	domains=/tmp/adh-domains
	get_domains > $domains

	if [ ! -s "$domains" ]; then
		$UTILS/_log.sh 'info' "No domain to scan. Trying again in 10 seconds"
		sleep 10
		continue
	fi

	$UTILS/_log.sh 'info' 'Running: Nuclei (Dangling CNAME - Generic)'
	dangling_cname_scan $domains

	$UTILS/_log.sh 'info' 'Running: Nuclei (Dangling CNAME - Cloud Providers)'
	$UTILS/exploit_and_save.sh 'nuclei' $domains '-templates dns/elasticbeanstalk-takeover.yaml,dns/azure-takeover-detection.yaml'

	$UTILS/_log.sh 'info' 'Running: Nuclei (HTTP Based Takeovers)'
	$UTILS/exploit_and_save.sh 'nuclei' $domains '-templates http/takeovers'

done
