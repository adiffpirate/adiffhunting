#!/bin/bash
set -eEo pipefail
trap '$UTILS/_stacktrace.sh "$?" "$BASH_SOURCE" "$BASH_COMMAND" "$LINENO"' ERR

get_domain(){
	# Get a domain with A/AAAA/CNAME record and without the "lastExploit" field
	# reverse ordered by level so that lower level domains are scanned first
	domain_with_record=$(
		$UTILS/get_dnsrecords.sh \
			-t 'A AAAA CNAME' \
			-f "not has(Domain.lastExploit)" \
			-a 'orderdesc: Domain.level, first: 1' \
		| awk '{print $1}' | sort -u
	)
	# If all domains have "lastExploit", get the oldest with A/AAAA/CNAME record
	# that is at least older than $DOMAIN_SCAN_COOLDOWN
	if [ -z "$domain_with_record" ]; then
		domain_with_record=$(
			$UTILS/get_dnsrecords.sh \
				-t 'A AAAA CNAME' \
				-f "lt(Domain.lastExploit, \"$(date -Iseconds -d "-$DOMAIN_SCAN_COOLDOWN")\")" \
				-a 'orderasc: Domain.lastExploit, first: 1' \
			| awk '{print $1}' | sort -u
		)
	fi

	if [ -z "$domain_with_record" ]; then # Return if unable to get a domain
		return
	fi

	$UTILS/_log.sh 'info' 'Updating lastExploit field' "domain=$domain_with_record"
	$UTILS/query_dgraph.sh -q "
		mutation {
			updateDomain(input: {
				filter: { name: { eq: \"$domain_with_record\" } },
				set: { lastExploit: \"$(date -Iseconds)\"} }
			){
				domain { name }
			}
		}
	"

	# Print domain
	echo $domain_with_record
}

while true; do
	$UTILS/op_start.sh

	domain=$(get_domain)

	if [ -z "$domain" ]; then
		$UTILS/_log.sh 'info' "No domain to scan. Trying again in 10 seconds"
		sleep 10
		continue
	fi

	$UTILS/_log.sh 'info' 'Running: Nuclei'
	$UTILS/exploit_and_save.sh 'nuclei' <(echo $domain) '-tags rce'

	$UTILS/op_end.sh
done
