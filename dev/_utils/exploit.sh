#!/bin/bash

script_path=$(dirname "$0")

set -eEo pipefail
trap '$script_path/_stacktrace.sh "$?" "$BASH_SOURCE" "$BASH_COMMAND" "$LINENO"' ERR

update_resolvers(){
	# Get updated list of resolvers once a day
	if [ $(($(date +%s)-$(date +%s -r $RESOLVERS_FILE || echo 86401))) -gt 86400 ]; then
		$script_path/_log.sh 'info' 'Downloading resolvers file'
		# Send to tmp file to avoid corrupting the file in case of curl errors
		tmp_resolvers_file=$(mktemp)
		curl --no-progress-meter --fail https://raw.githubusercontent.com/trickest/resolvers/main/resolvers.txt > $tmp_resolvers_file
		# Replace resolvers file
		cp $tmp_resolvers_file $RESOLVERS_FILE
	fi
}

run_nuclei(){
	nuclei_input=$1
	nuclei_args=$2
	nuclei_output=/tmp/adh-exploit-and-save-nuclei-output.txt

	nuclei \
		-list $nuclei_input -output $nuclei_output -jsonl \
		-silent -no-stdin -resolvers $RESOLVERS_FILE \
		-concurrency 1 -rate-limit 10 -no-interactsh \
		$nuclei_args \
	> /dev/null

	if [ ! -s "$nuclei_output" ]; then
		$script_path/_log.sh 'info' 'Nothing was found'
	fi

	# Parse and print nuclei output in JSON Lines format according to Vuln schema
	cat $nuclei_output | while read line; do
		$script_path/_log.sh 'debug' 'Parsing nuclei output' "output=$line"
		echo $line | jq -c '{
			name: ( .info.name + ": " + (."matched-at" | sub("^http(s){0,1}://"; "")) ),
			domain: { name: (."matched-at" | sub("^http(s){0,1}://"; "")) },
			title: .info.name,
			class: { name: "xss" },
			description: .info.description,
			severity: .info.severity,
			references: .info.reference,
			evidence: { target: ."extracted-results"[0], request: .request, response: .response },
			foundBy: [ { name: "nuclei", type: "exploit" } ],
			updatedAt: .timestamp
		}' || $script_path/_log.sh 'error' 'Error while parsing nuclei output' "output=$line"
	done
}

scan=$1
scan_input=$2
scan_args=$3

update_resolvers
run_$scan "$scan_input" "$scan_args" # The output is printed in JSON Lines format according to Vuln schema
